#include <iostream> 
#include <vector> 
#include <algorithm> 
using namespace std; 
class PriorityQueue { 
private: 
 struct Element { 
 int value; 
 int priority; 
 }; 
 
 vector<Element> queue; 
 
 static bool compare(Element a, Element b) {
 return a.priority > b.priority; 
 } 
public: 

 void enqueue(int x, int priority) { 
 Element newElement = {x, priority}; 
 queue.push_back(newElement); 
  
 sort(queue.begin(), queue.end(), compare); 
 } 
 
 void dequeue() { 
 if (queue.empty()) { 
 cout << "Queue is Empty!" << endl; 
 return; 
 } 
 cout << "Dequeued: " << queue.front().value << endl; 
 queue.erase(queue.begin()); 
 } 

 int getFront() { 
 if (queue.empty()) { 
 cout << "Queue is Empty!" << endl; 
 return -1; 
 } 
 return queue.front().value; 
 } 
 
 bool isEmpty() { 
 return queue.empty(); 
 } 
}; 
int main() { 
 PriorityQueue pq; 
 pq.enqueue(10, 1); 
 pq.enqueue(20, 3);  
 pq.enqueue(30, 2);  
 cout << "Front element: " << pq.getFront() << endl;  
 pq.dequeue(); 
 cout << "Front element aÅŒer dequeue: " << pq.getFront() << endl; // Should be 30
 pq.dequeue(); 
 pq.dequeue(); 
 pq.dequeue(); 
 
 return 0; 
} 
