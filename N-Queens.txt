#include <iostream>
#include <vector>
#include <cmath>
class Solution {
public:
    int totalNQueens(int n) {
        int count = 0;
        std::vector<int> queens(n, -1); 
        backtrack(0, n, queens, count);
        return count;
    }
private:
    void backtrack(int row, int n, std::vector<int>& queens, int& count) {
        if (row == n) {
            count++; 
            return;
        }
        for (int col = 0; col < n; col++) {
            if (isValid(row, col, queens)) {
                queens[row] = col;           
                backtrack(row + 1, n, queens, count); 
                queens[row] = -1;             
            }
        }
    }
    bool isValid(int row, int col, const std::vector<int>& queens) {
        for (int i = 0; i < row; i++) {
            if (queens[i] == col || 
                abs(queens[i] - col) == abs(i - row)) {
                return false;
            }
        }
        return true;
    }
};
int main() {
    Solution solution;
    int n;
    std::cout << "Enter the value of n: ";
    std::cin >> n;
    int result = solution.totalNQueens(n);
    std::cout << "Number of distinct solutions for " << n << "-Queens: " << result << std::endl;
    return 0;
}
